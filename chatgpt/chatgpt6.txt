https://chatgpt.com/share/6855ba5b-1ee8-8008-b4e0-ed869d5d42eb

Μετάβαση στο περιεχόμενο
Ιστορικό συνομιλιών

Είπες:
java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '6971717135' for key 'customers.UK_unique_phone'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:109) ~[mysql-connector-j-9.2.0.jar:9.2.0]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114) ~[mysql-connector-j-9.2.0.jar:9.2.0]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:990) ~[mysql-connector-j-9.2.0.jar:9.2.0]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1168) ~[mysql-connector-j-9.2.0.jar:9.2.0]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1103) ~[mysql-connector-j-9.2.0.jar:9.2.0]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1450) ~[mysql-connector-j-9.2.0.jar:9.2.0]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:1086) ~[mysql-connector-j-9.2.0.jar:9.2.0]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-6.3.0.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-6.3.0.jar:na]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performMutation(GetGeneratedKeysDelegate.java:116) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:47) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.doStaticInserts(InsertCoordinatorStandard.java:194) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.coordinateInsert(InsertCoordinatorStandard.java:132) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.persister.entity.mutation.InsertCoordinatorStandard.insert(InsertCoordinatorStandard.java:95) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:85) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:682) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:293) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:274) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:324) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:394) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:308) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:224) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:136) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:177) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:95) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:79) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:761) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:745) ~[hibernate-core-6.6.15.Final.jar:6.6.15.Final]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364) ~[spring-orm-6.2.7.jar:6.2.7]
	at jdk.proxy4/jdk.proxy4.$Proxy138.persist(Unknown Source) ~[na:na]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:320) ~[spring-orm-6.2.7.jar:6.2.7]
	at jdk.proxy4/jdk.proxy4.$Proxy138.persist(Unknown Source) ~[na:na]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:651) ~[spring-data-jpa-3.5.0.jar:3.5.0]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277) ~[spring-data-commons-3.5.0.jar:3.5.0]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170) ~[spring-data-commons-3.5.0.jar:3.5.0]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158) ~[spring-data-commons-3.5.0.jar:3.5.0]
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:515) ~[spring-data-commons-3.5.0.jar:3.5.0]
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:284) ~[spring-data-commons-3.5.0.jar:3.5.0]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:734) ~[spring-data-commons-3.5.0.jar:3.5.0]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:174) ~[spring-data-commons-3.5.0.jar:3.5.0]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:149) ~[spring-data-commons-3.5.0.jar:3.5.0]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:69) ~[spring-data-commons-3.5.0.jar:3.5.0]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.5.0.jar:3.5.0]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.7.jar:6.2.7]
	at jdk.proxy4/jdk.proxy4.$Proxy147.save(Unknown Source) ~[na:na]
	at com.example.securityapi.service.CustomerService.saveCustomer(CustomerService.java:21) ~[classes/:na] <!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="~{layout}" lang="en">
<head>
    <meta charset="UTF-8">
    <title>Register | My Store</title>
</head>
<body>

<section layout:fragment="content" class="container d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="card shadow-lg p-4" style="width: 100%; max-width: 500px;">
        <h4 class="mb-4 text-center">Create an Account</h4>

        <form th:action="@{/register}" th:object="${customer}" method="post">
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" id="username" class="form-control" placeholder="Enter username"
                       th:field="*{username}" required />
                <div class="text-danger" th:if="${#fields.hasErrors('username')}" th:errors="*{username}"></div>
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">First Name</label>
                <input type="text" id="name" class="form-control" placeholder="Enter first name"
                       th:field="*{name}" required />
            </div>

            <div class="mb-3">
                <label for="surname" class="form-label">Surname</label>
                <input type="text" id="surname" class="form-control" placeholder="Enter surname"
                       th:field="*{surname}" required />
            </div>

            <div class="mb-3">
                <label for="dateOfBirth" class="form-label">Date of Birth</label>
                <input type="date" id="dateOfBirth" class="form-control"
                       th:field="*{dateOfBirth}" required />
                <div class="text-danger" th:if="${#fields.hasErrors('dateOfBirth')}" th:errors="*{dateOfBirth}"></div>
            </div>

            <div class="mb-3">
                <label for="address" class="form-label">Address</label>
                <input type="text" id="address" class="form-control" placeholder="Enter address"
                       th:field="*{address}" required />
            </div>

<!--            <div class="mb-3">-->
<!--                <label for="phoneNumber" class="form-label">Phone Number</label>-->
<!--                <input type="tel" id="phoneNumber" class="form-control" placeholder="Enter phone number"-->
<!--                       th:field="*{phoneNumber}" required />-->
<!--            </div>-->
            <div class="mb-3">
                <label for="phoneNumber" class="form-label">Phone Number</label>
                <input type="text" th:field="*{phoneNumber}" class="form-control" id="phoneNumber">
                <div class="text-danger" th:if="${#fields.hasErrors('phoneNumber')}" th:errors="*{phoneNumber}"></div>
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" id="email" class="form-control" placeholder="Enter email"
                       th:field="*{email}" required />
                <div class="text-danger" th:if="${#fields.hasErrors('email')}" th:errors="*{email}"></div>
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" id="password" class="form-control" placeholder="Enter password"
                       th:field="*{password}" required />
            </div>

            <div class="d-grid mb-3">
                <button type="submit" class="btn btn-success">Register</button>
            </div>
        </form>

        <div class="text-center">
            <a th:href="@{/login}">Already have an account? Login</a>
        </div>
    </div>
</section>

</body>
</html> package com.example.securityapi.model;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.*;
import org.springframework.format.annotation.DateTimeFormat;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "customers")
@Data
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Customer {
    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<CartItem> cartItems = new HashSet<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    @NotBlank(message = "Username is required")
    private String username;

    @NotBlank(message = "Name is required")
    private String name;

    @NotBlank(message = "Surname is required")
    private String surname;

    @NotNull(message = "Date of birth is required")
    @Past(message = "Date of birth must be in the past")
    @DateTimeFormat(pattern = "yyyy-MM-dd")
    private LocalDate dateOfBirth;

    @NotBlank(message = "Address is required")
    private String address;

    @Column(nullable = false, unique = true)
    @NotBlank(message = "Phone number is required")
    @Pattern(regexp = "^[0-9]{10,15}$", message = "Phone number must be 10 to 15 digits only")
    private String phoneNumber;



    @NotBlank(message = "Email is required")
    @Email(message = "Email should be valid")
    @Column(nullable = false, unique = true)
    private String email;

    @NotBlank(message = "Password is required")
    private String password;

    @Column(nullable = false)
    private boolean isAdmin;
}
package com.example.securityapi.controller;

import com.example.securityapi.exception.BookNotFoundException;
import com.example.securityapi.model.Author;
import com.example.securityapi.model.Book;
import com.example.securityapi.model.ChartHistory;
import com.example.securityapi.model.Customer;
import com.example.securityapi.service.AuthorService;
import com.example.securityapi.service.CartHistoryService;
import com.example.securityapi.service.CustomerService;
import com.example.securityapi.service.BookService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDate;
import java.util.List;

@Controller
@RequestMapping("/")
public class CustomerController {
    private static final Logger logger = LoggerFactory.getLogger(CustomerController.class);
    private final CustomerService customerService;
    private final BookService bookService;
    private final AuthorService authorService;
    public CustomerController(CustomerService customerService, BookService bookService, AuthorService authorService) {
        this.customerService = customerService;
        this.bookService = bookService;
        this.authorService = authorService;
    }
    // Make loggedInUser available to all views
    @ModelAttribute
    public void addLoggedInUserToModel(HttpSession session, Model model) {
        String loggedInUser = (String) session.getAttribute("loggedInUser");
        model.addAttribute("loggedInUser", loggedInUser);
    }

    // Home page

//    @GetMapping
//    public String home() {
//        return "index";
//    }
@GetMapping("")
public String viewHomePage(@RequestParam(name = "keyword", required = false) String keyword,
                           Model model, HttpSession session) {
    List<Book> books;
    if (keyword != null && !keyword.isEmpty()) {
        books = bookService.searchBooks(keyword);
    } else {
        books = bookService.findAllBooks();
    }

    // ✅ Safely filter books into a new list
    List<Book> filteredBooks = books.stream()
            .filter(book ->
                    book != null &&
                            book.getTitle() != null &&
                            book.getAuthors() != null &&
                            !book.getAuthors().isEmpty() &&
                            book.getPrice() != null
            )
            .toList();

    model.addAttribute("books", filteredBooks);
    model.addAttribute("keyword", keyword);
    return "index";
}

    // Customer list page
    @GetMapping("/customers")
    public String listCustomers(Model model) {
        List<Customer> customers = customerService.getAllCustomers();
        model.addAttribute("customers", customers);
        return "customers";
        // TODO: Restrict this page to ADMIN only in the future with Spring Security
    }

    // Show registration form
    @GetMapping("/register")
    public String showRegisterForm(Model model) { //Manually add empty object to the view. 	Server → View
        model.addAttribute("customer", new Customer());
        return "register";
    }

    // Process registration
//    @PostMapping("/register")
//    public String registerCustomer(@ModelAttribute("customer") Customer customer) { //binds data from form inputs. View → Server
//        customerService.saveCustomer(customer);
//        return "redirect:/login";
//    }
    @PostMapping("/register")
    public String registerCustomer(@Valid @ModelAttribute("customer") Customer customer,
                                   BindingResult result,
                                   Model model) {
        if (result.hasErrors()) {
            return "register";
        }

        // ✅ Manual DOB validation
        if (customer.getDateOfBirth().isBefore(LocalDate.of(1900, 1, 1)) ||
                customer.getDateOfBirth().isAfter(LocalDate.of(2010, 12, 31))) {
            result.rejectValue("dateOfBirth", "error.customer", "Date of birth must be between 1900 and 2010");
            return "register";
        }

        // ✅ Check for duplicate username
        if (customerService.findByUsername(customer.getUsername()) != null) {
            result.rejectValue("username", "error.customer", "Username already exists");
            return "register";
        }

        // ✅ Check for duplicate email
        if (customerService.findByEmail(customer.getEmail()) != null) {
            result.rejectValue("email", "error.customer", "Email already exists");
            return "register";
        }

        customerService.saveCustomer(customer);
        return "redirect:/login";
    }
    // Show login form
    @GetMapping("/login")
    public String showLoginForm(Model model) {
        model.addAttribute("customer", new Customer()); // Needed for th:object
        return "login";
    }

//    @PostMapping("/login")
//    public String loginCustomer(@ModelAttribute("customer") Customer customer,
//                                HttpServletRequest request,
//                                Model model) {
//
//        String username = customer.getUsername();
//        String password = customer.getPassword();
//
//        logger.info("Customer '{}' is attempting to log in", username);
//
//        boolean authenticated = customerService.authenticateCustomer(username, password);
//
//        if (authenticated) {
//            request.getSession().invalidate();
//            request.getSession(true).setAttribute("loggedInUser", username);
//            logger.info("Customer '{}' logged in successfully", username);
//            return "redirect:/";
//        } else {
//            model.addAttribute("customer", new Customer());
//            model.addAttribute("error", "Invalid username or password!");
//            return "login";
//        }
//    }
@PostMapping("/login")
public String loginCustomer(@ModelAttribute("customer") Customer customer,
                            HttpServletRequest request,
                            Model model) {
    String username = customer.getUsername();
    String password = customer.getPassword();
    logger.info("Customer '{}' is attempting to log in", username);
    boolean authenticated = customerService.authenticateCustomer(username, password);
    if (authenticated) {
        request.getSession().invalidate();
        HttpSession session = request.getSession(true);
        session.setAttribute("loggedInUser", username);
        Customer loggedIn = customerService.findByUsername(username);
        session.setAttribute("isAdmin", loggedIn.isAdmin());
        logger.info("Customer '{}' logged in successfully", username);
        if (loggedIn.isAdmin()) {
            return "redirect:/admin/books";
        }
        return "redirect:/";
    } else {
        model.addAttribute("customer", new Customer());
        model.addAttribute("error", "Invalid username or password!");
        return "login";
    }
}
    @GetMapping("/customLogout")
    public String logout(HttpServletRequest request) {
        logger.info("Customer '{}' Logout");
        HttpSession session = request.getSession(false);
        if (session != null) {
            logger.info("Customer '{}' Logout", session.getAttribute("loggedInUser"));
            session.invalidate();
        }
        return "redirect:/login?logout";
    }

    // Admin only

    @GetMapping("/admin/books")
    public String bookList(Model model, HttpSession session) {
        // Admin check
        if (!Boolean.TRUE.equals(session.getAttribute("isAdmin"))) {
            return "redirect:/login";
        }

        // This part for the table remains the same
        model.addAttribute("books", bookService.findAllBooks());
        model.addAttribute("allAuthors", authorService.findAll());

        // --- START: The Fix for Default Values ---

        // 1. Create a new Book instance
        Book newBook = new Book();

        // 2. Set the desired default values on the object
        newBook.setYear(LocalDate.now().getYear()); // Sets the current year (e.g., 2024)
        newBook.setPrice(20.00);                    // Sets the default price to 20.00
        newBook.setCopies(1);                       // Sets the default quantity to 1

        // 3. Add the pre-populated book object to the model
        model.addAttribute("newBook", newBook);

        // --- END: The Fix ---

        return "admin_books";
    }

//    @PostMapping("/admin/books/add")
//    public String addBook(@ModelAttribute Book book, HttpSession session) {
//        if (!Boolean.TRUE.equals(session.getAttribute("isAdmin"))) {
//            return "redirect:/login";
//        }
//
//        bookService.saveBook(book);
//        return "redirect:/admin/books";
//    }
@PostMapping("/admin/books/add")
public String addBook(@ModelAttribute Book book, Model model) {
    // Check for existing book with same title, authors, and year
    if (bookService.bookExists(book.getTitle(), book.getAuthors(), book.getYear())) {
        model.addAttribute("error", "A book with the same title, authors, and year already exists.");
        model.addAttribute("book", book);
        return "admin_book_form";
    }

    bookService.saveBook(book);
    return "redirect:/admin/books";
}
    @GetMapping("/admin/books/edit/{id}")
    public String showEditBookForm(@PathVariable Long id, Model model, HttpSession session) throws BookNotFoundException {
        if (!Boolean.TRUE.equals(session.getAttribute("isAdmin"))) {
            return "redirect:/login";
        }

        // 1. Get the book to be edited
        Book book = bookService.getBookById(id);

        // --- FINAL DEBUGGING STEP ---
        // Print the ID of the book THE MOMENT it comes back from the service.
        //System.out.println("FETCHED BOOK FOR EDIT PAGE. ID IS: " + book.getId());
        // --- END DEBUGGING STEP ---

        // 2. Get all authors for the dropdown
        List<Author> allAuthors = authorService.findAll();

        // 3. Add the book and authors to the model
        model.addAttribute("book", book);
        model.addAttribute("allAuthors", allAuthors);

        return "admin_edit_book";
    }
    @PutMapping("/admin/books/update")
    public String updateBook(@Valid @ModelAttribute("book") Book book,
                             BindingResult bindingResult,
                             HttpSession session,
                             RedirectAttributes redirectAttributes) throws BookNotFoundException {

        if (!Boolean.TRUE.equals(session.getAttribute("isAdmin"))) {
            return "redirect:/login";
        }

        if (bindingResult.hasErrors()) {
            redirectAttributes.addFlashAttribute("errorMessage", "Copies must be a positive whole number (e.g. 0, 1, 2...).");
            return "redirect:/admin/books/edit/" + book.getId();
        }

        Book existingBook = bookService.getBookById(book.getId());
        if (existingBook == null) {
            return "redirect:/admin/books?error=notfound";
        }

        existingBook.setTitle(book.getTitle());
        existingBook.setPrice(book.getPrice());
        existingBook.setAuthors(book.getAuthors());
        existingBook.setYear(book.getYear());
        existingBook.setCopies(book.getCopies());

        bookService.saveBook(existingBook);
        return "redirect:/admin/books";
    }
    @DeleteMapping("/admin/books/delete/{id}")
    public String deleteBook(@PathVariable Long id, HttpSession session) throws BookNotFoundException {
        if (!Boolean.TRUE.equals(session.getAttribute("isAdmin"))) {
            return "redirect:/login";
        }

        bookService.deleteBook(id);
        return "redirect:/admin/books";
    }
    @GetMapping("/admin/customers")
    public String viewCustomers(Model model, HttpSession session) {
        if (!Boolean.TRUE.equals(session.getAttribute("isAdmin"))) {
            return "redirect:/login";
        }

        List<Customer> customers = customerService.getAllCustomers();
        model.addAttribute("customers", customers);
        return "admin_customers";
    }
    @GetMapping("/admin/authors")
    public String manageAuthors(Model model, HttpSession session,
                                @ModelAttribute("error") String errorMessage) {
        if (!Boolean.TRUE.equals(session.getAttribute("isAdmin"))) {
            return "redirect:/login";
        }

        List<Author> authors = authorService.findAll();
        model.addAttribute("authors", authors);
        model.addAttribute("newAuthor", new Author()); // for add form

        // ✅ Pass flash error to template as "errorMessage"
        if (errorMessage != null && !errorMessage.isEmpty()) {
            model.addAttribute("errorMessage", errorMessage);
        }

        return "admin_manage_authors";
    }
    @PostMapping("/admin/authors/add")
    public String addAuthor(@ModelAttribute Author author,
                            RedirectAttributes redirectAttributes,
                            HttpSession session) {

        if (!Boolean.TRUE.equals(session.getAttribute("isAdmin"))) {
            return "redirect:/login";
        }

        if (authorService.exists(author.getFirstName(), author.getLastName())) {
            redirectAttributes.addFlashAttribute("error", "Author already exists.");
            return "redirect:/admin/authors";
        }

        authorService.add(author);
        return "redirect:/admin/authors";
    }
    @DeleteMapping("/admin/authors/delete/{id}")
    public String deleteAuthor(@PathVariable Long id,
                               RedirectAttributes redirectAttributes,
                               HttpSession session) {

        if (!Boolean.TRUE.equals(session.getAttribute("isAdmin"))) {
            return "redirect:/login";
        }

        Author author = authorService.findById(id);
        if (author == null) {
            redirectAttributes.addFlashAttribute("error", "Author not found.");
        } else if (!author.getBooks().isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "Cannot delete author assigned to books.");
        } else {
            authorService.deleteById(id);
        }

        return "redirect:/admin/authors";
    }
}

Το ChatGPT είπε:
The error you're encountering:

java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '6971717135' for key 'customers.UK_unique_phone'
means that you're trying to insert a new customer into the customers table using a phone number (6971717135) that already exists in the database. The phoneNumber column is defined as unique, which prevents duplicate values.

✅ Immediate Fix
To avoid this exception and give proper feedback to the user:

1. Add phone number duplication check before saving:
Update your registration handler in CustomerController.java to include a check like:

// ✅ Check for duplicate phone number
if (customerService.findByPhoneNumber(customer.getPhoneNumber()) != null) {
    result.rejectValue("phoneNumber", "error.customer", "Phone number already exists");
    return "register";
}
Ensure this goes before customerService.saveCustomer(customer);.

2. Add this method to your CustomerService and repository:
In CustomerService:

public Customer findByPhoneNumber(String phoneNumber);
If you're using an interface with default methods:

default Customer findByPhoneNumber(String phoneNumber) {
    return getRepository().findByPhoneNumber(phoneNumber);
}
In CustomerRepository:

Optional<Customer> findByPhoneNumber(String phoneNumber);
If you're not using Optional, then:

Customer findByPhoneNumber(String phoneNumber);
✅ Bonus Tips
Always check for uniqueness in the controller before persisting, especially for fields with @Column(unique = true).

Consider trimming input before saving or comparing: customer.getPhoneNumber().trim()

If you're using case-insensitive fields (like emails), normalize them (e.g., toLowerCase()).

✅ Final Flow in CustomerController (snippet):
@PostMapping("/register")
public String registerCustomer(@Valid @ModelAttribute("customer") Customer customer,
                               BindingResult result,
                               Model model) {
    if (result.hasErrors()) {
        return "register";
    }

    if (customer.getDateOfBirth().isBefore(LocalDate.of(1900, 1, 1)) ||
            customer.getDateOfBirth().isAfter(LocalDate.of(2010, 12, 31))) {
        result.rejectValue("dateOfBirth", "error.customer", "Date of birth must be between 1900 and 2010");
        return "register";
    }

    if (customerService.findByUsername(customer.getUsername()) != null) {
        result.rejectValue("username", "error.customer", "Username already exists");
        return "register";
    }

    if (customerService.findByEmail(customer.getEmail()) != null) {
        result.rejectValue("email", "error.customer", "Email already exists");
        return "register";
    }

    if (customerService.findByPhoneNumber(customer.getPhoneNumber()) != null) {
        result.rejectValue("phoneNumber", "error.customer", "Phone number already exists");
        return "register";
    }

    customerService.saveCustomer(customer);
    return "redirect:/login";
}
Let me know if you want the CustomerService and CustomerRepository classes updated accordingly.

Είπες:
package com.example.securityapi.model;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.*;
import org.springframework.format.annotation.DateTimeFormat;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "customers")
@Data
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Customer {
    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<CartItem> cartItems = new HashSet<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    @NotBlank(message = "Username is required")
    private String username;

    @NotBlank(message = "Name is required")
    private String name;

    @NotBlank(message = "Surname is required")
    private String surname;

    @NotNull(message = "Date of birth is required")
    @Past(message = "Date of birth must be in the past")
    @DateTimeFormat(pattern = "yyyy-MM-dd")
    private LocalDate dateOfBirth;

    @NotBlank(message = "Address is required")
    private String address;

    @Column(nullable = false, unique = true)
    @NotBlank(message = "Phone number is required")
    @Pattern(regexp = "^[0-9]{10,15}$", message = "Phone number must be 10 to 15 digits only")
    private String phoneNumber;



    @NotBlank(message = "Email is required")
    @Email(message = "Email should be valid")
    @Column(nullable = false, unique = true)
    private String email;

    @NotBlank(message = "Password is required")
    private String password;

    @Column(nullable = false)
    private boolean isAdmin;
} package com.example.securityapi.repository;

import com.example.securityapi.model.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface CustomerRepository extends JpaRepository<Customer, Long> {
    Optional<Customer> findByEmailAndPassword(String email, String password);
    Optional<Customer> findByNameAndPassword(String name, String password);
    Optional<Customer> findByUsernameAndPassword(String username, String password);
    Optional<Customer> findByUsername(String username);
    Optional<Customer> findByEmail(String email);
}
package com.example.securityapi.service;

import com.example.securityapi.model.Customer;
import com.example.securityapi.repository.CustomerRepository;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CustomerService {
    private final CustomerRepository customerRepository;
    public CustomerService(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }
    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }
    //@Transactional
    public void saveCustomer(Customer customer) {
        customerRepository.save(customer);
    }
    public Customer findByUsername(String username) {
        return customerRepository.findByUsername(username).orElse(null);
    }
//
//    public boolean authenticateCustomer(String name, String password) {
//        return customerRepository.findByNameAndPassword(name, password).isPresent();
//    }

    public boolean authenticateCustomer(String username, String password) {
        return customerRepository.findByUsernameAndPassword(username, password).isPresent();
    }
    public Customer findByEmail(String email) {
        return customerRepository.findByEmail(email).orElse(null);
    }
}
what to update and where?
Το ChatGPT είπε:
To fix the Duplicate entry issue for phoneNumber, you need to:

✅ 1. Add findByPhoneNumber(...) in the Repository
Update CustomerRepository.java:

Optional<Customer> findByPhoneNumber(String phoneNumber);
Full file after update:

package com.example.securityapi.repository;

import com.example.securityapi.model.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface CustomerRepository extends JpaRepository<Customer, Long> {
    Optional<Customer> findByEmailAndPassword(String email, String password);
    Optional<Customer> findByNameAndPassword(String name, String password);
    Optional<Customer> findByUsernameAndPassword(String username, String password);
    Optional<Customer> findByUsername(String username);
    Optional<Customer> findByEmail(String email);
    Optional<Customer> findByPhoneNumber(String phoneNumber); // ✅ ADD THIS
}
✅ 2. Add findByPhoneNumber(...) in the Service
Update CustomerService.java:

public Customer findByPhoneNumber(String phoneNumber) {
    return customerRepository.findByPhoneNumber(phoneNumber).orElse(null);
}
Full service update:

@Service
public class CustomerService {
    private final CustomerRepository customerRepository;
    public CustomerService(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }

    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }

    public void saveCustomer(Customer customer) {
        customerRepository.save(customer);
    }

    public Customer findByUsername(String username) {
        return customerRepository.findByUsername(username).orElse(null);
    }

    public Customer findByEmail(String email) {
        return customerRepository.findByEmail(email).orElse(null);
    }

    public Customer findByPhoneNumber(String phoneNumber) { // ✅ ADD THIS
        return customerRepository.findByPhoneNumber(phoneNumber).orElse(null);
    }

    public boolean authenticateCustomer(String username, String password) {
        return customerRepository.findByUsernameAndPassword(username, password).isPresent();
    }
}
✅ 3. Update CustomerController.java registration method
Now that the service method exists, update the registerCustomer method in your CustomerController:

Add this check after email duplication check:
if (customerService.findByPhoneNumber(customer.getPhoneNumber()) != null) {
    result.rejectValue("phoneNumber", "error.customer", "Phone number already exists");
    return "register";
}
Final method should look like:
@PostMapping("/register")
public String registerCustomer(@Valid @ModelAttribute("customer") Customer customer,
                               BindingResult result,
                               Model model) {
    if (result.hasErrors()) {
        return "register";
    }

    if (customer.getDateOfBirth().isBefore(LocalDate.of(1900, 1, 1)) ||
            customer.getDateOfBirth().isAfter(LocalDate.of(2010, 12, 31))) {
        result.rejectValue("dateOfBirth", "error.customer", "Date of birth must be between 1900 and 2010");
        return "register";
    }

    if (customerService.findByUsername(customer.getUsername()) != null) {
        result.rejectValue("username", "error.customer", "Username already exists");
        return "register";
    }

    if (customerService.findByEmail(customer.getEmail()) != null) {
        result.rejectValue("email", "error.customer", "Email already exists");
        return "register";
    }

    if (customerService.findByPhoneNumber(customer.getPhoneNumber()) != null) { // ✅ ADD THIS
        result.rejectValue("phoneNumber", "error.customer", "Phone number already exists");
        return "register";
    }

    customerService.saveCustomer(customer);
    return "redirect:/login";
}
✅ Summary of What to Update and Where
File	Update
CustomerRepository.java	Add Optional<Customer> findByPhoneNumber(String phoneNumber);
CustomerService.java	Add method public Customer findByPhoneNumber(String phoneNumber)
CustomerController.java	Add phone duplication check inside registerCustomer method
Let me know if you’d like to also normalize phone numbers (e.g., trim or format before save) or enforce uniqueness case-insensitively for usernames/emails.




Δεν επιλέχθηκε κανένα αρχείο.Δεν επιλέχθηκε κανένα αρχείο.
Το ChatGPT μπορεί να κάνει λάθη. Να ελέγχεις τις σημαντικές πληροφορίες. Βλέπε Προτιμήσεις cookie.
